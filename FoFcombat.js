// Generated by Haxe 3.4.7
(function ($hx_exports, $global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var CombatConsts = $hx_exports["CombatConsts"] = function() { };
CombatConsts.__name__ = true;
var CombatSystem = $hx_exports["CombatSystem"] = function(mapWidth,mapHeight) {
	this.mapWidth = mapWidth;
	this.mapHeight = mapHeight;
	this.mapTilesPerFloor = mapWidth * mapHeight;
	this.mapTotalTiles = this.mapTilesPerFloor * CombatConsts.MAP_FLOORS_COUNT;
	var this1 = new Uint8Array(this.mapTotalTiles);
	this.passMap = this1;
	this.lastBlockingNum = CombatConsts.MAP_TILE_EXIT;
	this.creatures = [];
	this.creaturesByID = new haxe_ds_StringMap();
	this.players = [];
	this.playersByID = new haxe_ds_StringMap();
	this.monsters = [];
	this.monstersByID = new haxe_ds_StringMap();
};
CombatSystem.__name__ = true;
CombatSystem.prototype = {
	getPassMap: function() {
		return this.passMap;
	}
	,getMapTileIndexByCoords: function(x,y,z) {
		return z * this.mapTilesPerFloor + y * this.mapWidth + x;
	}
	,getTileState: function(x,y,z) {
		return this.passMap[this.getMapTileIndexByCoords(x,y,z)];
	}
	,getTileStateByIndex: function(index) {
		return this.passMap[index];
	}
	,setTileState: function(x,y,z,state) {
		this.passMap[this.getMapTileIndexByCoords(x,y,z)] = state & 255;
	}
	,setTileStateByIndex: function(index,state) {
		this.passMap[index] = state & 255;
	}
	,addCreature: function(creature) {
		var id = creature.id;
		creature.blockingNum = ++this.lastBlockingNum;
		this.setTileState(creature.mapTileX,creature.mapTileY,creature.mapTileZ,creature.blockingNum);
		var this1 = new hxmath_math_Vector2Default((creature.mapTileX + 0.5) * CombatConsts.MAP_TILE_SIZE,(creature.mapTileY + 0.5) * CombatConsts.MAP_TILE_SIZE);
		creature.mapPos = this1;
		creature.movementX = creature.movementY = 0;
		creature.movementDir = creature.targetMapPos = null;
		creature.excessiveMovement = 0;
		this.creatures.push(creature);
		var _this = this.creaturesByID;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,creature);
		} else {
			_this.h[id] = creature;
		}
	}
	,addPlayer: function(player) {
		this.addCreature(player);
		this.players.push(player);
		var _this = this.playersByID;
		var key = player.id;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,player);
		} else {
			_this.h[key] = player;
		}
	}
	,addMonster: function(monster) {
		this.addCreature(monster);
		this.monsters.push(monster);
		var _this = this.monstersByID;
		var key = monster.id;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,monster);
		} else {
			_this.h[key] = monster;
		}
	}
	,removeCreature: function(creature) {
		HxOverrides.remove(this.creatures,creature);
		this.creaturesByID.remove(creature.id);
		this.setTileState(creature.mapTileX,creature.mapTileY,creature.mapTileZ,CombatConsts.MAP_TILE_FREE);
	}
	,removeCreatureByID: function(id) {
		var _this = this.creaturesByID;
		this.removeCreature(__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]);
	}
	,removePlayer: function(player) {
		this.removeCreature(player);
		HxOverrides.remove(this.players,player);
	}
	,removePlayerByID: function(id) {
		var _this = this.playersByID;
		var player = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		this.removeCreature(player);
		HxOverrides.remove(this.players,player);
		this.playersByID.remove(id);
	}
	,removeMonster: function(monster) {
		this.removeCreature(monster);
		HxOverrides.remove(this.monsters,monster);
	}
	,removeMonsterByID: function(id) {
		var _this = this.monstersByID;
		var monster = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		this.removeCreature(monster);
		HxOverrides.remove(this.monsters,monster);
		this.monstersByID.remove(id);
	}
	,setCreaturePos: function(id,mapPos) {
		var _this = this.creaturesByID;
		var creature = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		if(creature == null) {
			return;
		}
		creature.mapPos = mapPos;
		var newMapTileX = mapPos.x / CombatConsts.MAP_TILE_SIZE | 0;
		var newMapTileY = mapPos.y / CombatConsts.MAP_TILE_SIZE | 0;
		if(newMapTileX != creature.mapTileX || newMapTileY != creature.mapTileY) {
			this.setTileState(creature.mapTileX,creature.mapTileY,creature.mapTileZ,CombatConsts.MAP_TILE_FREE);
			creature.mapTileX = newMapTileX;
			creature.mapTileY = newMapTileY;
			this.setTileState(creature.mapTileX,creature.mapTileY,creature.mapTileZ,creature.blockingNum);
		}
	}
	,tick: function(delta) {
		this.processCreaturesMovement(delta);
	}
	,processCreaturesMovement: function(delta) {
		var _g = 0;
		var _g1 = this.creatures;
		while(_g < _g1.length) {
			var creature = _g1[_g];
			++_g;
			if(creature.movementDir == null && (creature.movementX != 0 || creature.movementY != 0)) {
				var targetTileX = creature.mapTileX + creature.movementX;
				var targetTileY = creature.mapTileY + creature.movementY;
				if(targetTileX < 0 || targetTileX >= this.mapWidth || targetTileY < 0 || targetTileY >= this.mapHeight) {
					continue;
				}
				if(this.getTileState(targetTileX,targetTileY,creature.mapTileZ) != CombatConsts.MAP_TILE_FREE) {
					continue;
				}
				var this1 = new hxmath_math_Vector2Default((targetTileX + 0.5) * CombatConsts.MAP_TILE_SIZE,(targetTileY + 0.5) * CombatConsts.MAP_TILE_SIZE);
				creature.targetMapPos = this1;
				var this2 = new hxmath_math_Vector2Default(creature.movementX,creature.movementY);
				creature.movementDir = this2;
				var self = creature.movementDir;
				var self1 = self;
				var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y);
				if(length > 0.0) {
					var self2 = self;
					self2.x /= length;
					self2.y /= length;
				}
				var a = creature.mapPos;
				var s = creature.excessiveMovement;
				var self3 = creature.movementDir;
				var this3 = new hxmath_math_Vector2Default(self3.x,self3.y);
				var self4 = this3;
				self4.x *= s;
				self4.y *= s;
				var b = self4;
				var self5 = a;
				var this4 = new hxmath_math_Vector2Default(self5.x,self5.y);
				var self6 = this4;
				self6.x += b.x;
				self6.y += b.y;
				creature.mapPos = self6;
			}
			creature.excessiveMovement = 0;
			if(creature.movementDir != null) {
				var a1 = creature.mapPos;
				var s1 = creature.abilities.moveSpeed;
				var self7 = creature.movementDir;
				var this5 = new hxmath_math_Vector2Default(self7.x,self7.y);
				var self8 = this5;
				self8.x *= s1;
				self8.y *= s1;
				var self9 = self8;
				var this6 = new hxmath_math_Vector2Default(self9.x,self9.y);
				var self10 = this6;
				self10.x *= delta;
				self10.y *= delta;
				var b1 = self10;
				var self11 = a1;
				var this7 = new hxmath_math_Vector2Default(self11.x,self11.y);
				var self12 = this7;
				self12.x += b1.x;
				self12.y += b1.y;
				creature.mapPos = self12;
				var newMapTileX = creature.mapPos.x / CombatConsts.MAP_TILE_SIZE | 0;
				var newMapTileY = creature.mapPos.y / CombatConsts.MAP_TILE_SIZE | 0;
				if(newMapTileX != creature.mapTileX || newMapTileY != creature.mapTileY) {
					this.setTileState(creature.mapTileX,creature.mapTileY,creature.mapTileZ,CombatConsts.MAP_TILE_FREE);
					creature.mapTileX = newMapTileX;
					creature.mapTileY = newMapTileY;
					this.setTileState(creature.mapTileX,creature.mapTileY,creature.mapTileZ,creature.blockingNum);
				}
				var b2 = creature.mapPos;
				var self13 = creature.targetMapPos;
				var this8 = new hxmath_math_Vector2Default(self13.x,self13.y);
				var self14 = this8;
				self14.x -= b2.x;
				self14.y -= b2.y;
				var toTarget = self14;
				var a2 = creature.movementDir;
				if(a2.x * toTarget.x + a2.y * toTarget.y < 0) {
					var this9 = new hxmath_math_Vector2Default((creature.mapTileX + 0.5) * CombatConsts.MAP_TILE_SIZE,(creature.mapTileY + 0.5) * CombatConsts.MAP_TILE_SIZE);
					creature.mapPos = this9;
					creature.targetMapPos = null;
					creature.movementDir = null;
					var self15 = toTarget;
					creature.excessiveMovement = Math.sqrt(self15.x * self15.x + self15.y * self15.y);
				}
			}
		}
	}
	,__class__: CombatSystem
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function() { };
haxe_io_Bytes.__name__ = true;
var hxmath_math_IntVector2Default = function(x,y) {
	this.x = x;
	this.y = y;
};
hxmath_math_IntVector2Default.__name__ = true;
hxmath_math_IntVector2Default.prototype = {
	toString: function() {
		return "(" + this.x + ", " + this.y + ")";
	}
	,__class__: hxmath_math_IntVector2Default
};
var hxmath_math__$IntVector2_IntVector2_$Impl_$ = {};
hxmath_math__$IntVector2_IntVector2_$Impl_$.__name__ = true;
hxmath_math__$IntVector2_IntVector2_$Impl_$._new = function(x,y) {
	var this1 = new hxmath_math_IntVector2Default(x,y);
	return this1;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.fromArray = function(rawData) {
	if(rawData.length != 2) {
		throw new js__$Boot_HaxeError("Invalid rawData.");
	}
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(rawData[0],rawData[1]);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.toVector2 = function(this1) {
	var self = this1;
	var this2 = new hxmath_math_Vector2Default(self.x,self.y);
	return this2;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.dot = function(a,b) {
	return a.x * b.x + a.y * b.y;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.multiply = function(a,s) {
	var self = a;
	var self1 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(self.x,self.y);
	self1.x *= s;
	self1.y *= s;
	return self1;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.add = function(a,b) {
	var self = a;
	var self1 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(self.x,self.y);
	self1.x += b.x;
	self1.y += b.y;
	return self1;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.subtract = function(a,b) {
	var self = a;
	var self1 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(self.x,self.y);
	self1.x -= b.x;
	self1.y -= b.y;
	return self1;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.negate = function(a) {
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(-a.x,-a.y);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.equals = function(a,b) {
	if(!(a == null && b == null)) {
		if(a != null && b != null && a.x == b.x) {
			return a.y == b.y;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.max = function(a,b) {
	var self = a;
	var self1 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(self.x,self.y);
	var a1 = self1.x;
	var b1 = b.x;
	self1.x = b1 > a1 ? b1 : a1;
	var a2 = self1.y;
	var b2 = b.y;
	self1.y = b2 > a2 ? b2 : a2;
	return self1;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.min = function(a,b) {
	var self = a;
	var self1 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(self.x,self.y);
	var a1 = self1.x;
	var b1 = b.x;
	self1.x = b1 < a1 ? b1 : a1;
	var a2 = self1.y;
	var b2 = b.y;
	self1.y = b2 < a2 ? b2 : a2;
	return self1;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.set = function(this1,x,y) {
	var self = this1;
	self.x = x;
	self.y = y;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.multiplyWith = function(this1,s) {
	var self = this1;
	self.x *= s;
	self.y *= s;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.addWith = function(this1,a) {
	var self = this1;
	self.x += a.x;
	self.y += a.y;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.subtractWith = function(this1,a) {
	var self = this1;
	self.x -= a.x;
	self.y -= a.y;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.maxWith = function(this1,a) {
	var self = this1;
	var a1 = self.x;
	var b = a.x;
	self.x = b > a1 ? b : a1;
	var a2 = self.y;
	var b1 = a.y;
	self.y = b1 > a2 ? b1 : a2;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.minWith = function(this1,a) {
	var self = this1;
	var a1 = self.x;
	var b = a.x;
	self.x = b < a1 ? b : a1;
	var a2 = self.y;
	var b1 = a.y;
	self.y = b1 < a2 ? b1 : a2;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.copyTo = function(this1,target) {
	var self = this1;
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var self1 = self;
		var value;
		switch(i) {
		case 0:
			value = self1.x;
			break;
		case 1:
			value = self1.y;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value1 = value;
		var self2 = target;
		switch(i) {
		case 0:
			self2.x = value1;
			break;
		case 1:
			self2.y = value1;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.clone = function(this1) {
	var self = this1;
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(self.x,self.y);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x;
	case 1:
		return self.y;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x = value;
	case 1:
		return self.y = value;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.applyNegate = function(this1) {
	var self = this1;
	self.x = -self.x;
	self.y = -self.y;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.applyScalarFunc = function(this1,func) {
	var self = this1;
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var self1 = self;
		var value;
		switch(i) {
		case 0:
			value = self1.x;
			break;
		case 1:
			value = self1.y;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value1 = func(value);
		var self2 = self;
		switch(i) {
		case 0:
			self2.x = value1;
			break;
		case 1:
			self2.y = value1;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.rotateLeft = function(this1) {
	var self = this1;
	var newX = -self.y;
	self.y = self.x;
	self.x = newX;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.rotateRight = function(this1) {
	var self = this1;
	var newX = self.y;
	self.y = -self.x;
	self.x = newX;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.get_zero = function() {
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(0,0);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.get_xAxis = function() {
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(1,0);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.get_yAxis = function() {
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(0,1);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.get_lengthSq = function(this1) {
	var self = this1;
	return self.x * self.x + self.y * self.y;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.get_rotatedLeft = function(this1) {
	var self = this1;
	var self1 = self;
	var self2 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(self1.x,self1.y);
	var newX = -self2.y;
	self2.y = self2.x;
	self2.x = newX;
	return self2;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.get_rotatedRight = function(this1) {
	var self = this1;
	var self1 = self;
	var self2 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(self1.x,self1.y);
	var newX = self2.y;
	self2.y = -self2.x;
	self2.x = newX;
	return self2;
};
var hxmath_math_MathUtil = function() { };
hxmath_math_MathUtil.__name__ = true;
hxmath_math_MathUtil.intMax = function(a,b) {
	if(b > a) {
		return b;
	} else {
		return a;
	}
};
hxmath_math_MathUtil.intMin = function(a,b) {
	if(b < a) {
		return b;
	} else {
		return a;
	}
};
hxmath_math_MathUtil.lerpCyclic = function(a,b,t,max) {
	if(Math.abs(a - b) > 0.5 * max) {
		if(a < b) {
			a += max;
		} else {
			b += max;
		}
	}
	var x = (1.0 - t) * a + t * b;
	if(x < 0) {
		return max - -x % max;
	} else {
		return x % max;
	}
};
hxmath_math_MathUtil.sign = function(x,w) {
	if(w == null) {
		w = 0;
	}
	if(Math.abs(x) < w) {
		return 0;
	} else if(x <= -w) {
		return -1;
	} else {
		return 1;
	}
};
hxmath_math_MathUtil.rangeDistance = function(aStart,aWidth,bStart,bWidth) {
	if(aStart + aWidth < bStart) {
		return bStart - (aStart + aWidth);
	} else if(bStart + bWidth < aStart) {
		return aStart - (bStart + bWidth);
	} else {
		return 0;
	}
};
hxmath_math_MathUtil.openRangeContains = function(aStart,aWidth,x) {
	if(x > aStart) {
		return x < aStart + aWidth;
	} else {
		return false;
	}
};
hxmath_math_MathUtil.openRangesIntersect = function(aStart,aWidth,bStart,bWidth) {
	return !(aStart >= bStart + bWidth || bStart >= aStart + aWidth);
};
hxmath_math_MathUtil.closedRangeContains = function(aStart,aWidth,x) {
	if(x >= aStart) {
		return x <= aStart + aWidth;
	} else {
		return false;
	}
};
hxmath_math_MathUtil.radToDeg = function(rad) {
	return 180 / Math.PI * rad;
};
hxmath_math_MathUtil.degToRad = function(deg) {
	return Math.PI / 180 * deg;
};
hxmath_math_MathUtil.wrap = function(x,n) {
	if(x < 0) {
		return n - -x % n;
	} else {
		return x % n;
	}
};
hxmath_math_MathUtil.clamp = function(value,min,max) {
	if(value < min) {
		return min;
	} else if(value > max) {
		return max;
	} else {
		return value;
	}
};
hxmath_math_MathUtil.orient2d = function(a,b,c) {
	var result = (a.x - c.x) * (b.y - c.y) - (a.y - c.y) * (b.x - c.x);
	if(result > 0) {
		return 1;
	} else if(result < 0) {
		return -1;
	} else {
		return 0;
	}
};
hxmath_math_MathUtil.det2x2 = function(m00,m10,m01,m11) {
	return m00 * m11 - m10 * m01;
};
hxmath_math_MathUtil.det3x3 = function(m00,m10,m20,m01,m11,m21,m02,m12,m22) {
	return m00 * (m11 * m22 - m21 * m12) - m10 * (m01 * m22 - m21 * m02) + m20 * (m01 * m12 - m11 * m02);
};
hxmath_math_MathUtil.det4x4 = function(m00,m10,m20,m30,m01,m11,m21,m31,m02,m12,m22,m32,m03,m13,m23,m33) {
	return m00 * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13)) - m10 * (m01 * (m22 * m33 - m32 * m23) - m21 * (m02 * m33 - m32 * m03) + m31 * (m02 * m23 - m22 * m03)) + m20 * (m01 * (m12 * m33 - m32 * m13) - m11 * (m02 * m33 - m32 * m03) + m31 * (m02 * m13 - m12 * m03)) - m30 * (m01 * (m12 * m23 - m22 * m13) - m11 * (m02 * m23 - m22 * m03) + m21 * (m02 * m13 - m12 * m03));
};
var hxmath_math_Vector2Default = function(x,y) {
	this.x = x;
	this.y = y;
};
hxmath_math_Vector2Default.__name__ = true;
hxmath_math_Vector2Default.prototype = {
	toString: function() {
		return "(" + this.x + ", " + this.y + ")";
	}
	,__class__: hxmath_math_Vector2Default
};
var hxmath_math__$Vector2_Vector2_$Impl_$ = {};
hxmath_math__$Vector2_Vector2_$Impl_$.__name__ = true;
hxmath_math__$Vector2_Vector2_$Impl_$._new = function(x,y) {
	var this1 = new hxmath_math_Vector2Default(x,y);
	return this1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.fromArray = function(rawData) {
	if(rawData.length != 2) {
		throw new js__$Boot_HaxeError("Invalid rawData.");
	}
	var this1 = new hxmath_math_Vector2Default(rawData[0],rawData[1]);
	return this1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.fromPolar = function(angle,radius) {
	var this1 = new hxmath_math_Vector2Default(radius * Math.cos(angle),radius * Math.sin(angle));
	return this1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.fromVector2Shape = function(other) {
	var this1 = new hxmath_math_Vector2Default(other.x,other.y);
	return this1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.toIntVector2 = function(this1,func) {
	var self = this1;
	if(func == null) {
		func = Std["int"];
	}
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(func(self.x),func(self.y));
};
hxmath_math__$Vector2_Vector2_$Impl_$.dot = function(a,b) {
	return a.x * b.x + a.y * b.y;
};
hxmath_math__$Vector2_Vector2_$Impl_$.multiply = function(a,s) {
	var self = a;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self1 = this1;
	self1.x *= s;
	self1.y *= s;
	return self1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.divide = function(a,s) {
	var self = a;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self1 = this1;
	self1.x /= s;
	self1.y /= s;
	return self1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.add = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self1 = this1;
	self1.x += b.x;
	self1.y += b.y;
	return self1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.subtract = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self1 = this1;
	self1.x -= b.x;
	self1.y -= b.y;
	return self1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.negate = function(a) {
	var this1 = new hxmath_math_Vector2Default(-a.x,-a.y);
	return this1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.equals = function(a,b) {
	if(!(a == null && b == null)) {
		if(a != null && b != null && a.x == b.x) {
			return a.y == b.y;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math__$Vector2_Vector2_$Impl_$.lerp = function(a,b,t) {
	var this1 = new hxmath_math_Vector2Default((1.0 - t) * a.x + t * b.x,(1.0 - t) * a.y + t * b.y);
	return this1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.max = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self1 = this1;
	self1.x = Math.max(self1.x,b.x);
	self1.y = Math.max(self1.y,b.y);
	return self1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.min = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self1 = this1;
	self1.x = Math.min(self1.x,b.x);
	self1.y = Math.min(self1.y,b.y);
	return self1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.project = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self1 = this1;
	var s = (self1.x * b.x + self1.y * b.y) / (b.x * b.x + b.y * b.y);
	var self2 = b;
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var self3 = self2;
		var value;
		switch(i) {
		case 0:
			value = self3.x;
			break;
		case 1:
			value = self3.y;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value1 = value;
		var self4 = self1;
		switch(i) {
		case 0:
			self4.x = value1;
			break;
		case 1:
			self4.y = value1;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	var self5 = self1;
	self5.x *= s;
	self5.y *= s;
	return self1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.reflect = function(v,normal) {
	var self = v;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self1 = this1;
	var self2 = self1;
	var this2 = new hxmath_math_Vector2Default(self2.x,self2.y);
	var self3 = this2;
	var s = (self3.x * normal.x + self3.y * normal.y) / (normal.x * normal.x + normal.y * normal.y);
	var self4 = normal;
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var self5 = self4;
		var value;
		switch(i) {
		case 0:
			value = self5.x;
			break;
		case 1:
			value = self5.y;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value1 = value;
		var self6 = self3;
		switch(i) {
		case 0:
			self6.x = value1;
			break;
		case 1:
			self6.y = value1;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	var self7 = self3;
	self7.x *= s;
	self7.y *= s;
	var projected = self3;
	var self8 = projected;
	self8.x *= 2.0;
	self8.y *= 2.0;
	var self9 = self1;
	self9.x -= projected.x;
	self9.y -= projected.y;
	return self1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.orthoNormalize = function(u,v) {
	var self = u;
	var self1 = self;
	var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y);
	if(length > 0.0) {
		var self2 = self;
		self2.x /= length;
		self2.y /= length;
	}
	var self3 = v;
	var this1 = new hxmath_math_Vector2Default(self3.x,self3.y);
	var self4 = this1;
	var s = (self4.x * u.x + self4.y * u.y) / (u.x * u.x + u.y * u.y);
	var self5 = u;
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var self6 = self5;
		var value;
		switch(i) {
		case 0:
			value = self6.x;
			break;
		case 1:
			value = self6.y;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value1 = value;
		var self7 = self4;
		switch(i) {
		case 0:
			self7.x = value1;
			break;
		case 1:
			self7.y = value1;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	var self8 = self4;
	self8.x *= s;
	self8.y *= s;
	var a = self4;
	var self9 = v;
	self9.x -= a.x;
	self9.y -= a.y;
	var self10 = v;
	var self11 = self10;
	var length1 = Math.sqrt(self11.x * self11.x + self11.y * self11.y);
	if(length1 > 0.0) {
		var self12 = self10;
		self12.x /= length1;
		self12.y /= length1;
	}
};
hxmath_math__$Vector2_Vector2_$Impl_$.set = function(this1,x,y) {
	var self = this1;
	self.x = x;
	self.y = y;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.multiplyWith = function(this1,s) {
	var self = this1;
	self.x *= s;
	self.y *= s;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.divideWith = function(this1,s) {
	var self = this1;
	self.x /= s;
	self.y /= s;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.addWith = function(this1,a) {
	var self = this1;
	self.x += a.x;
	self.y += a.y;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.subtractWith = function(this1,a) {
	var self = this1;
	self.x -= a.x;
	self.y -= a.y;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.maxWith = function(this1,a) {
	var self = this1;
	self.x = Math.max(self.x,a.x);
	self.y = Math.max(self.y,a.y);
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.minWith = function(this1,a) {
	var self = this1;
	self.x = Math.min(self.x,a.x);
	self.y = Math.min(self.y,a.y);
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.projectOnto = function(this1,a) {
	var self = this1;
	var s = (self.x * a.x + self.y * a.y) / (a.x * a.x + a.y * a.y);
	var self1 = a;
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var self2 = self1;
		var value;
		switch(i) {
		case 0:
			value = self2.x;
			break;
		case 1:
			value = self2.y;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value1 = value;
		var self3 = self;
		switch(i) {
		case 0:
			self3.x = value1;
			break;
		case 1:
			self3.y = value1;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	var self4 = self;
	self4.x *= s;
	self4.y *= s;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.reflectBy = function(this1,normal) {
	var self = this1;
	var self1 = self;
	var this2 = new hxmath_math_Vector2Default(self1.x,self1.y);
	var self2 = this2;
	var s = (self2.x * normal.x + self2.y * normal.y) / (normal.x * normal.x + normal.y * normal.y);
	var self3 = normal;
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var self4 = self3;
		var value;
		switch(i) {
		case 0:
			value = self4.x;
			break;
		case 1:
			value = self4.y;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value1 = value;
		var self5 = self2;
		switch(i) {
		case 0:
			self5.x = value1;
			break;
		case 1:
			self5.y = value1;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	var self6 = self2;
	self6.x *= s;
	self6.y *= s;
	var projected = self2;
	var self7 = projected;
	self7.x *= 2.0;
	self7.y *= 2.0;
	var self8 = self;
	self8.x -= projected.x;
	self8.y -= projected.y;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.copyTo = function(this1,target) {
	var self = this1;
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var self1 = self;
		var value;
		switch(i) {
		case 0:
			value = self1.x;
			break;
		case 1:
			value = self1.y;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value1 = value;
		var self2 = target;
		switch(i) {
		case 0:
			self2.x = value1;
			break;
		case 1:
			self2.y = value1;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
};
hxmath_math__$Vector2_Vector2_$Impl_$.copyToShape = function(this1,target) {
	var self = this1;
	target.x = self.x;
	target.y = self.y;
};
hxmath_math__$Vector2_Vector2_$Impl_$.copyFromShape = function(this1,source) {
	var self = this1;
	self.x = source.x;
	self.y = source.y;
};
hxmath_math__$Vector2_Vector2_$Impl_$.clone = function(this1) {
	var self = this1;
	var this2 = new hxmath_math_Vector2Default(self.x,self.y);
	return this2;
};
hxmath_math__$Vector2_Vector2_$Impl_$.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x;
	case 1:
		return self.y;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Vector2_Vector2_$Impl_$.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x = value;
	case 1:
		return self.y = value;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Vector2_Vector2_$Impl_$.applyNegate = function(this1) {
	var self = this1;
	self.x = -self.x;
	self.y = -self.y;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.applyScalarFunc = function(this1,func) {
	var self = this1;
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var self1 = self;
		var value;
		switch(i) {
		case 0:
			value = self1.x;
			break;
		case 1:
			value = self1.y;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value1 = func(value);
		var self2 = self;
		switch(i) {
		case 0:
			self2.x = value1;
			break;
		case 1:
			self2.y = value1;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.angleWith = function(this1,b) {
	var self = this1;
	var self1 = self;
	var self2 = b;
	return Math.acos((self.x * b.x + self.y * b.y) / (Math.sqrt(self1.x * self1.x + self1.y * self1.y) * Math.sqrt(self2.x * self2.x + self2.y * self2.y)));
};
hxmath_math__$Vector2_Vector2_$Impl_$.signedAngleWith = function(this1,b) {
	var self = this1;
	var x = self.x * b.y - b.x * self.y;
	var self1 = self;
	var self2 = self1;
	var self3 = b;
	return (Math.abs(x) < 0 ? 0 : x <= 0 ? -1 : 1) * Math.acos((self1.x * b.x + self1.y * b.y) / (Math.sqrt(self2.x * self2.x + self2.y * self2.y) * Math.sqrt(self3.x * self3.x + self3.y * self3.y)));
};
hxmath_math__$Vector2_Vector2_$Impl_$.distanceTo = function(this1,b) {
	var self = this1;
	var self1 = self;
	var this2 = new hxmath_math_Vector2Default(self1.x,self1.y);
	var self2 = this2;
	self2.x -= b.x;
	self2.y -= b.y;
	var self3 = self2;
	return Math.sqrt(self3.x * self3.x + self3.y * self3.y);
};
hxmath_math__$Vector2_Vector2_$Impl_$.normalize = function(this1) {
	var self = this1;
	var self1 = self;
	var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y);
	if(length > 0.0) {
		var self2 = self;
		self2.x /= length;
		self2.y /= length;
	}
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.normalizeTo = function(this1,newLength) {
	var self = this1;
	var self1 = self;
	var self2 = self1;
	var length = Math.sqrt(self2.x * self2.x + self2.y * self2.y);
	if(length > 0.0) {
		var self3 = self1;
		self3.x /= length;
		self3.y /= length;
	}
	var self4 = self;
	self4.x *= newLength;
	self4.y *= newLength;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.clamp = function(this1,min,max) {
	var self = this1;
	var self1 = self;
	var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y);
	if(length < min) {
		var self2 = self;
		var self3 = self2;
		var self4 = self3;
		var length1 = Math.sqrt(self4.x * self4.x + self4.y * self4.y);
		if(length1 > 0.0) {
			var self5 = self3;
			self5.x /= length1;
			self5.y /= length1;
		}
		var self6 = self2;
		self6.x *= min;
		self6.y *= min;
	} else if(length > max) {
		var self7 = self;
		var self8 = self7;
		var self9 = self8;
		var length2 = Math.sqrt(self9.x * self9.x + self9.y * self9.y);
		if(length2 > 0.0) {
			var self10 = self8;
			self10.x /= length2;
			self10.y /= length2;
		}
		var self11 = self7;
		self11.x *= max;
		self11.y *= max;
	}
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.rotate = function(this1,angle,pivot) {
	var self = this1;
	var cos = Math.cos(angle);
	var sin = Math.sin(angle);
	var dx = self.x - pivot.x;
	var dy = self.y - pivot.y;
	self.x = dx * Math.cos(angle) - dy * Math.sin(angle);
	self.y = dx * Math.sin(angle) + dy * Math.cos(angle);
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.rotateLeft = function(this1) {
	var self = this1;
	var newX = -self.y;
	self.y = self.x;
	self.x = newX;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.rotateRight = function(this1) {
	var self = this1;
	var newX = self.y;
	self.y = -self.x;
	self.x = newX;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_zero = function() {
	var this1 = new hxmath_math_Vector2Default(0.0,0.0);
	return this1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_xAxis = function() {
	var this1 = new hxmath_math_Vector2Default(1.0,0.0);
	return this1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_yAxis = function() {
	var this1 = new hxmath_math_Vector2Default(0.0,1.0);
	return this1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_length = function(this1) {
	var self = this1;
	return Math.sqrt(self.x * self.x + self.y * self.y);
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_lengthSq = function(this1) {
	var self = this1;
	return self.x * self.x + self.y * self.y;
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_angle = function(this1) {
	var self = this1;
	return Math.atan2(self.y,self.x);
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_normal = function(this1) {
	var self = this1;
	var self1 = self;
	var this2 = new hxmath_math_Vector2Default(self1.x,self1.y);
	var self2 = this2;
	var self3 = self2;
	var length = Math.sqrt(self3.x * self3.x + self3.y * self3.y);
	if(length > 0.0) {
		var self4 = self2;
		self4.x /= length;
		self4.y /= length;
	}
	return self2;
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_rotatedLeft = function(this1) {
	var self = this1;
	var self1 = self;
	var this2 = new hxmath_math_Vector2Default(self1.x,self1.y);
	var self2 = this2;
	var newX = -self2.y;
	self2.y = self2.x;
	self2.x = newX;
	return self2;
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_rotatedRight = function(this1) {
	var self = this1;
	var self1 = self;
	var this2 = new hxmath_math_Vector2Default(self1.x,self1.y);
	var self2 = this2;
	var newX = self2.y;
	self2.y = -self2.x;
	self2.x = newX;
	return self2;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
CombatConsts.MAP_TILE_SIZE = 32;
CombatConsts.MAP_FLOORS_COUNT = 16;
CombatConsts.MAP_GROUND_FLOOR = 7;
CombatConsts.MAP_TILE_FREE = 0;
CombatConsts.MAP_TILE_BLOCKING = 1;
CombatConsts.MAP_TILE_FLOOR_CHANGE = 2;
CombatConsts.MAP_TILE_EXIT = 3;
hxmath_math__$IntVector2_IntVector2_$Impl_$.elementCount = 2;
hxmath_math_MathUtil.eps = 1e-6;
hxmath_math__$Vector2_Vector2_$Impl_$.elementCount = 2;
js_Boot.__toStr = ({ }).toString;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
